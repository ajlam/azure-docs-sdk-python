### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.iot.device.IoTHubDeviceClient.connect
  - azure.iot.device.IoTHubDeviceClient.create_from_connection_string
  - azure.iot.device.IoTHubDeviceClient.create_from_shared_access_signature
  - azure.iot.device.IoTHubDeviceClient.create_from_x509_certificate
  - azure.iot.device.IoTHubDeviceClient.disconnect
  - azure.iot.device.IoTHubDeviceClient.get_twin
  - azure.iot.device.IoTHubDeviceClient.patch_twin_reported_properties
  - azure.iot.device.IoTHubDeviceClient.receive_message
  - azure.iot.device.IoTHubDeviceClient.receive_method_request
  - azure.iot.device.IoTHubDeviceClient.receive_twin_desired_properties_patch
  - azure.iot.device.IoTHubDeviceClient.send_message
  - azure.iot.device.IoTHubDeviceClient.send_method_response
  class: azure.iot.device.IoTHubDeviceClient
  fullName: azure.iot.device.IoTHubDeviceClient
  inheritance:
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: azure.iot.device.iothub.abstract_clients.AbstractIoTHubClient
    type: azure.iot.device.iothub.sync_clients.GenericIoTHubClient
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: azure.iot.device.iothub.abstract_clients.AbstractIoTHubClient
    type: azure.iot.device.iothub.abstract_clients.AbstractIoTHubDeviceClient
  langs:
  - python
  module: azure.iot.device
  name: IoTHubDeviceClient
  source:
    id: IoTHubDeviceClient
    path: azure-iot-device\azure\iot\device\iothub\sync_clients.py
    remote:
      branch: ct-doc-revisions
      path: azure-iot-device\azure\iot\device\iothub\sync_clients.py
      repo: https://github.com/Azure/azure-iot-sdk-python/
    startLine: 275
  summary: 'A synchronous device client that connects to an Azure IoT Hub instance.


    Intended for usage with Python 2.7 or compatibility scenarios for Python 3.5.3+.'
  syntax:
    content: IoTHubDeviceClient(iothub_pipeline)
  type: class
  uid: azure.iot.device.IoTHubDeviceClient
- class: azure.iot.device.IoTHubDeviceClient
  fullName: azure.iot.device.IoTHubDeviceClient.connect
  langs:
  - python
  module: azure.iot.device
  name: connect()
  source:
    id: connect
    path: null
    remote:
      branch: ct-doc-revisions
      path: null
      repo: https://github.com/Azure/azure-iot-sdk-python/
    startLine: null
  summary: 'Connects the client to an Azure IoT Hub or Azure IoT Edge Hub instance.


    The destination is chosen based on the credentials passed via the auth_provider
    parameter

    that was provided when this object was initialized.


    This is a synchronous call, meaning that this function will not return until the
    connection

    to the service has been completely established.'
  syntax:
    content: connect()
    parameters: []
  type: method
  uid: azure.iot.device.IoTHubDeviceClient.connect
- class: azure.iot.device.IoTHubDeviceClient
  fullName: azure.iot.device.IoTHubDeviceClient.create_from_connection_string
  langs:
  - python
  module: azure.iot.device
  name: create_from_connection_string(connection_string, ca_cert=None)
  source:
    id: create_from_connection_string
    path: null
    remote:
      branch: ct-doc-revisions
      path: null
      repo: https://github.com/Azure/azure-iot-sdk-python/
    startLine: null
  summary: Instantiate the client from a IoTHub device or module connection string.
  syntax:
    content: create_from_connection_string(connection_string, ca_cert=None)
    parameters:
    - description: The connection string for the IoTHub you wish to connect to.
      id: connection_string
      type:
      - str
    - description: 'The trusted certificate chain. Only necessary when using a

        connection string with a GatewayHostName parameter.'
      id: ca_cert
      type:
      - str
    - defaultValue: None
      id: ca_cert
    return:
      description: An instance of an IoTHub client that uses a connection string for
        authentication.
  type: method
  uid: azure.iot.device.IoTHubDeviceClient.create_from_connection_string
- class: azure.iot.device.IoTHubDeviceClient
  fullName: azure.iot.device.IoTHubDeviceClient.create_from_shared_access_signature
  langs:
  - python
  module: azure.iot.device
  name: create_from_shared_access_signature(sas_token)
  source:
    id: create_from_shared_access_signature
    path: null
    remote:
      branch: ct-doc-revisions
      path: null
      repo: https://github.com/Azure/azure-iot-sdk-python/
    startLine: null
  summary: 'Instantiate the client from a Shared Access Signature (SAS) token.


    This method of instantiation is not recommended for general usage.'
  syntax:
    content: create_from_shared_access_signature(sas_token)
    parameters:
    - description: The string representation of a SAS token.
      id: sas_token
      type:
      - str
    - id: sas_token
    return:
      description: An instance of an IoTHub client that uses a SAS token for authentication.
  type: method
  uid: azure.iot.device.IoTHubDeviceClient.create_from_shared_access_signature
- class: azure.iot.device.IoTHubDeviceClient
  fullName: azure.iot.device.IoTHubDeviceClient.create_from_x509_certificate
  langs:
  - python
  module: azure.iot.device
  name: create_from_x509_certificate(x509, hostname, device_id)
  source:
    id: create_from_x509_certificate
    path: null
    remote:
      branch: ct-doc-revisions
      path: null
      repo: https://github.com/Azure/azure-iot-sdk-python/
    startLine: null
  summary: Instantiate a client which using X509 certificate authentication.
  syntax:
    content: create_from_x509_certificate(x509, hostname, device_id)
    parameters:
    - description: 'Host running the IotHub.

        Can be found in the Azure portal in the Overview tab as the string hostname.'
      id: hostname
      type:
      - str
    - description: 'The complete x509 certificate object.

        To use the certificate the enrollment object needs to contain cert

        (either the root certificate or one of the intermediate CA certificates).

        If the cert comes from a CER file, it needs to be base64 encoded.'
      id: x509
      type:
      - <xref:azure.iot.device.X509>
    - description: The ID used to uniquely identify a device in the IoTHub
      id: device_id
      type:
      - str
    - id: device_id
    return:
      description: An instance of an IoTHub client that uses an X509 certificate for
        authentication.
  type: method
  uid: azure.iot.device.IoTHubDeviceClient.create_from_x509_certificate
- class: azure.iot.device.IoTHubDeviceClient
  fullName: azure.iot.device.IoTHubDeviceClient.disconnect
  langs:
  - python
  module: azure.iot.device
  name: disconnect()
  source:
    id: disconnect
    path: null
    remote:
      branch: ct-doc-revisions
      path: null
      repo: https://github.com/Azure/azure-iot-sdk-python/
    startLine: null
  summary: 'Disconnect the client from the Azure IoT Hub or Azure IoT Edge Hub instance.


    This is a synchronous call, meaning that this function will not return until the
    connection

    to the service has been completely closed.'
  syntax:
    content: disconnect()
    parameters: []
  type: method
  uid: azure.iot.device.IoTHubDeviceClient.disconnect
- class: azure.iot.device.IoTHubDeviceClient
  fullName: azure.iot.device.IoTHubDeviceClient.get_twin
  langs:
  - python
  module: azure.iot.device
  name: get_twin()
  source:
    id: get_twin
    path: null
    remote:
      branch: ct-doc-revisions
      path: null
      repo: https://github.com/Azure/azure-iot-sdk-python/
    startLine: null
  summary: 'Gets the device or module twin from the Azure IoT Hub or Azure IoT Edge
    Hub service.


    This is a synchronous call, meaning that this function will not return until the
    twin

    has been retrieved from the service.'
  syntax:
    content: get_twin()
    parameters: []
    return:
      description: Twin object which was retrieved from the hub
  type: method
  uid: azure.iot.device.IoTHubDeviceClient.get_twin
- class: azure.iot.device.IoTHubDeviceClient
  fullName: azure.iot.device.IoTHubDeviceClient.patch_twin_reported_properties
  langs:
  - python
  module: azure.iot.device
  name: patch_twin_reported_properties(reported_properties_patch)
  source:
    id: patch_twin_reported_properties
    path: null
    remote:
      branch: ct-doc-revisions
      path: null
      repo: https://github.com/Azure/azure-iot-sdk-python/
    startLine: null
  summary: 'Update reported properties with the Azure IoT Hub or Azure IoT Edge Hub
    service.


    This is a synchronous call, meaning that this function will not return until the
    patch

    has been sent to the service and acknowledged.


    If the service returns an error on the patch operation, this function will raise
    the

    appropriate error.'
  syntax:
    content: patch_twin_reported_properties(reported_properties_patch)
    parameters:
    - description: ''
      id: reported_properties_patch
      type:
      - dict, str, int, float, bool,
      - None (JSON compatible values)
  type: method
  uid: azure.iot.device.IoTHubDeviceClient.patch_twin_reported_properties
- class: azure.iot.device.IoTHubDeviceClient
  fullName: azure.iot.device.IoTHubDeviceClient.receive_message
  langs:
  - python
  module: azure.iot.device
  name: receive_message(block=True, timeout=None)
  source:
    id: receive_message
    path: azure-iot-device\azure\iot\device\iothub\sync_clients.py
    remote:
      branch: ct-doc-revisions
      path: azure-iot-device\azure\iot\device\iothub\sync_clients.py
      repo: https://github.com/Azure/azure-iot-sdk-python/
    startLine: 293
  summary: Receive a message that has been sent from the Azure IoT Hub.
  syntax:
    content: receive_message(block=True, timeout=None)
    parameters:
    - defaultValue: 'True'
      description: Indicates if the operation should block until a message is received.
      id: block
      type:
      - bool
    - defaultValue: None
      description: Optionally provide a number of seconds until blocking times out.
      id: timeout
      type:
      - int
    return:
      description: Message that was sent from the Azure IoT Hub.
      type:
      - <xref:azure.iot.device.Message>
  type: method
  uid: azure.iot.device.IoTHubDeviceClient.receive_message
- class: azure.iot.device.IoTHubDeviceClient
  fullName: azure.iot.device.IoTHubDeviceClient.receive_method_request
  langs:
  - python
  module: azure.iot.device
  name: receive_method_request(method_name=None, block=True, timeout=None)
  source:
    id: receive_method_request
    path: null
    remote:
      branch: ct-doc-revisions
      path: null
      repo: https://github.com/Azure/azure-iot-sdk-python/
    startLine: null
  summary: Receive a method request via the Azure IoT Hub or Azure IoT Edge Hub.
  syntax:
    content: receive_method_request(method_name=None, block=True, timeout=None)
    parameters:
    - defaultValue: None
      description: 'Optionally provide the name of the method to receive requests
        for.

        If this parameter is not given, all methods not already being specifically
        targeted by

        a different request to receive_method will be received.'
      id: method_name
      type:
      - str
    - defaultValue: 'True'
      description: Indicates if the operation should block until a request is received.
      id: block
      type:
      - bool
    - defaultValue: None
      description: Optionally provide a number of seconds until blocking times out.
      id: timeout
      type:
      - int
    return:
      description: MethodRequest object representing the received method request.
      type:
      - '*azure.iot.device.MethodRequest*'
  type: method
  uid: azure.iot.device.IoTHubDeviceClient.receive_method_request
- class: azure.iot.device.IoTHubDeviceClient
  fullName: azure.iot.device.IoTHubDeviceClient.receive_twin_desired_properties_patch
  langs:
  - python
  module: azure.iot.device
  name: receive_twin_desired_properties_patch(block=True, timeout=None)
  source:
    id: receive_twin_desired_properties_patch
    path: null
    remote:
      branch: ct-doc-revisions
      path: null
      repo: https://github.com/Azure/azure-iot-sdk-python/
    startLine: null
  summary: "Receive a desired property patch via the Azure IoT Hub or Azure IoT Edge\
    \ Hub.\n\nThis is a synchronous call, which means the following:\n1. If block=True,\
    \ this function will block until one of the following happens:\n\n\n   * a desired\
    \ proprety patch is received from the Azure IoT Hub or Azure IoT Edge Hub. \n\n\
    \   * the timeout period, if provided, elapses.  If a timeout happens, this function\
    \ will raise a InboxEmpty exception \n\n\n2. If block=False, this function will\
    \ return any desired property patches which may have been received by the pipeline,\
    \ but not yet returned to the application.  If no desired property patches have\
    \ been received by the pipeline, this function will raise an InboxEmpty exception"
  syntax:
    content: receive_twin_desired_properties_patch(block=True, timeout=None)
    parameters:
    - defaultValue: 'True'
      description: Indicates if the operation should block until a request is received.
      id: block
      type:
      - bool
    - defaultValue: None
      description: Optionally provide a number of seconds until blocking times out.
      id: timeout
      type:
      - int
    return:
      description: desired property patch.  This can be dict, str, int, float, bool,
        or None (JSON compatible values)
  type: method
  uid: azure.iot.device.IoTHubDeviceClient.receive_twin_desired_properties_patch
- class: azure.iot.device.IoTHubDeviceClient
  fullName: azure.iot.device.IoTHubDeviceClient.send_message
  langs:
  - python
  module: azure.iot.device
  name: send_message(message)
  source:
    id: send_message
    path: null
    remote:
      branch: ct-doc-revisions
      path: null
      repo: https://github.com/Azure/azure-iot-sdk-python/
    startLine: null
  summary: 'Sends a message to the default events endpoint on the Azure IoT Hub or
    Azure IoT Edge Hub instance.


    This is a synchronous event, meaning that this function will not return until
    the event

    has been sent to the service and the service has acknowledged receipt of the event.


    If the connection to the service has not previously been opened by a call to connect,
    this

    function will open the connection before sending the event.'
  syntax:
    content: send_message(message)
    parameters:
    - description: 'The actual message to send. Anything passed that is not an instance
        of the

        Message class will be converted to Message object.'
      id: message
  type: method
  uid: azure.iot.device.IoTHubDeviceClient.send_message
- class: azure.iot.device.IoTHubDeviceClient
  fullName: azure.iot.device.IoTHubDeviceClient.send_method_response
  langs:
  - python
  module: azure.iot.device
  name: send_method_response(method_response)
  source:
    id: send_method_response
    path: null
    remote:
      branch: ct-doc-revisions
      path: null
      repo: https://github.com/Azure/azure-iot-sdk-python/
    startLine: null
  summary: 'Send a response to a method request via the Azure IoT Hub or Azure IoT
    Edge Hub.


    This is a synchronous event, meaning that this function will not return until
    the event

    has been sent to the service and the service has acknowledged receipt of the event.


    If the connection to the service has not previously been opened by a call to connect,
    this

    function will open the connection before sending the event.'
  syntax:
    content: send_method_response(method_response)
    parameters:
    - description: The MethodResponse to send.
      id: method_response
      type:
      - <xref:azure.iot.device.MethodResponse>
  type: method
  uid: azure.iot.device.IoTHubDeviceClient.send_method_response
references:
- fullName: azure.iot.device.IoTHubDeviceClient.connect
  isExternal: false
  name: connect()
  parent: azure.iot.device.IoTHubDeviceClient
  uid: azure.iot.device.IoTHubDeviceClient.connect
- fullName: azure.iot.device.IoTHubDeviceClient.create_from_connection_string
  isExternal: false
  name: create_from_connection_string(connection_string, ca_cert=None)
  parent: azure.iot.device.IoTHubDeviceClient
  uid: azure.iot.device.IoTHubDeviceClient.create_from_connection_string
- fullName: azure.iot.device.IoTHubDeviceClient.create_from_shared_access_signature
  isExternal: false
  name: create_from_shared_access_signature(sas_token)
  parent: azure.iot.device.IoTHubDeviceClient
  uid: azure.iot.device.IoTHubDeviceClient.create_from_shared_access_signature
- fullName: azure.iot.device.IoTHubDeviceClient.create_from_x509_certificate
  isExternal: false
  name: create_from_x509_certificate(x509, hostname, device_id)
  parent: azure.iot.device.IoTHubDeviceClient
  uid: azure.iot.device.IoTHubDeviceClient.create_from_x509_certificate
- fullName: azure.iot.device.IoTHubDeviceClient.disconnect
  isExternal: false
  name: disconnect()
  parent: azure.iot.device.IoTHubDeviceClient
  uid: azure.iot.device.IoTHubDeviceClient.disconnect
- fullName: azure.iot.device.IoTHubDeviceClient.get_twin
  isExternal: false
  name: get_twin()
  parent: azure.iot.device.IoTHubDeviceClient
  uid: azure.iot.device.IoTHubDeviceClient.get_twin
- fullName: azure.iot.device.IoTHubDeviceClient.patch_twin_reported_properties
  isExternal: false
  name: patch_twin_reported_properties(reported_properties_patch)
  parent: azure.iot.device.IoTHubDeviceClient
  uid: azure.iot.device.IoTHubDeviceClient.patch_twin_reported_properties
- fullName: azure.iot.device.IoTHubDeviceClient.receive_message
  isExternal: false
  name: receive_message(block=True, timeout=None)
  parent: azure.iot.device.IoTHubDeviceClient
  uid: azure.iot.device.IoTHubDeviceClient.receive_message
- fullName: azure.iot.device.IoTHubDeviceClient.receive_method_request
  isExternal: false
  name: receive_method_request(method_name=None, block=True, timeout=None)
  parent: azure.iot.device.IoTHubDeviceClient
  uid: azure.iot.device.IoTHubDeviceClient.receive_method_request
- fullName: azure.iot.device.IoTHubDeviceClient.receive_twin_desired_properties_patch
  isExternal: false
  name: receive_twin_desired_properties_patch(block=True, timeout=None)
  parent: azure.iot.device.IoTHubDeviceClient
  uid: azure.iot.device.IoTHubDeviceClient.receive_twin_desired_properties_patch
- fullName: azure.iot.device.IoTHubDeviceClient.send_message
  isExternal: false
  name: send_message(message)
  parent: azure.iot.device.IoTHubDeviceClient
  uid: azure.iot.device.IoTHubDeviceClient.send_message
- fullName: azure.iot.device.IoTHubDeviceClient.send_method_response
  isExternal: false
  name: send_method_response(method_response)
  parent: azure.iot.device.IoTHubDeviceClient
  uid: azure.iot.device.IoTHubDeviceClient.send_method_response
- fullName: dict, str, int, float, bool,
  name: dict, str, int, float, bool,
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: ', '
    name: ', '
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: int
    name: int
    uid: int
  - fullName: ', '
    name: ', '
  - fullName: float
    name: float
    uid: float
  - fullName: ', '
    name: ', '
  - fullName: bool,
    name: bool,
    uid: bool,
  uid: dict, str, int, float, bool,
- fullName: None (JSON compatible values)
  name: None (JSON compatible values)
  spec.python:
  - fullName: 'None '
    name: 'None '
    uid: 'None '
  - fullName: (
    name: (
  - fullName: JSON compatible values
    name: JSON compatible values
    uid: JSON compatible values
  - fullName: )
    name: )
  uid: None (JSON compatible values)
